stages:
  - build-core
  - build-app
  - test
  - sonar
  - deploy

.configure-timezone: &configure-timezone
  - echo "Europe/Stockholm" > /etc/timezone

.configure-gradle-home: &configure-gradle-home
  - export GRADLE_USER_HOME=`pwd`/.gradle

.in-docker:
  image: gradle:6.5.0-jdk8
  interruptible: true
  tags:
    - docker

.in-gradle-environment:
  extends:
    - .in-docker
  before_script:
    - *configure-timezone
    - *configure-gradle-home
  variables:
    GRADLE_OPTS: "-Dorg.gradle.daemon=false"

.in-android-environment:
  extends:
    - .in-gradle-environment
  image: raatiniemi/android-environment:android-30-latest
  before_script:
    - *configure-timezone
    - *configure-gradle-home
    - if [ -z "${KEYSTORE_BASE64}" ]; then echo "No keystore is available, ensure that \$KEYSTORE_BASE64 is set for project."; exit 1; fi;
    - echo "$KEYSTORE_BASE64" | base64 -d >app/upload.jks
  variables:
    ANDROID_HOME: "/opt/android-sdk"

# stage: build-core

core:build:
  stage: build-core
  extends:
    - .in-gradle-environment
  script:
    - gradle core:assemble core-test:assemble
  cache:
    key: "$CI_COMMIT_REF_NAME"
    policy: push
    paths:
      - .gradle
      - core/build
      - core-test/build
  artifacts:
    paths:
      - core/build/libs/
      - core/build/classes/kotlin/main/
      - core-test/build/libs/
      - core-test/build/classes/kotlin/main/
    expire_in: 4 hours

# stage: build-app

app:build:
  stage: build-app
  extends:
    - .in-android-environment
  script:
    - ./gradlew app:assembleRelease app:assembleInstrumented app:assembleAndroidTest
  needs:
    - core:build
  cache:
    key: "$CI_COMMIT_REF_NAME"
    paths:
      - .gradle
      - app/build
      - core/build
      - core-test/build
  artifacts:
    paths:
      - app/build/outputs/apk/androidTest
      - app/build/outputs/apk/instrumented
      - app/build/outputs/apk/release
      - app/build/tmp/kotlin-classes/instrumented
      - app/build/tmp/kotlin-classes/instrumentedAndroidTest
      - app/build/tmp/kotlin-classes/release
    expire_in: 4 hours

# stage: test

core:test:
  stage: test
  extends:
    - .in-gradle-environment
  script:
    - gradle core:test core-test:test
  needs:
    - core:build
  cache:
    key: "$CI_COMMIT_REF_NAME"
    policy: pull
    paths:
      - .gradle
      - core/build
      - core-test/build
  artifacts:
    paths:
      - core/build/jacoco/
      - core/build/test-results/test/
      - core/build/classes/kotlin/test/
      - core-test/build/jacoco/
      - core-test/build/test-results/test/
      - core-test/build/classes/kotlin/test/
    expire_in: 4 hours

app:lint:
  stage: test
  extends:
    - .in-android-environment
  script:
    - ./gradlew app:lintRelease
  needs:
    - core:build
    - app:build
  cache:
    key: "$CI_COMMIT_REF_NAME"
    policy: pull
    paths:
      - .gradle
      - app/build
      - core/build
      - core-test/build

app:test:
  stage: test
  extends:
    - .in-android-environment
  script:
    - ./gradlew app:testInstrumentedUnitTest
  needs:
    - core:build
    - app:build
  cache:
    key: "$CI_COMMIT_REF_NAME"
    policy: pull
    paths:
      - .gradle
      - app/build
      - core/build
      - core-test/build
  artifacts:
    paths:
      - app/build/jacoco/
      - app/build/test-results/testInstrumentedUnitTest/
      - app/build/tmp/kotlin-classes/instrumentedUnitTest/
    expire_in: 4 hours

app:instrumented test:
  stage: test
  extends:
    - .in-docker
  image: google/cloud-sdk:latest
  before_script:
    - if [ -z "${GCLOUD_PROJECT_ID}" ]; then echo "No project id is available for gcloud configuration, ensure that \$GCLOUD_PROJECT_ID is set for project."; exit 1; fi;
    - if [ -z "${GCLOUD_SERVICE_ACCOUNT}" ]; then echo "No service account configuration is available for gcloud, ensure that \$GCLOUD_SERVICE_ACCOUNT is set for project."; exit 1; fi;
    - gcloud config set project "${GCLOUD_PROJECT_ID}"
    - echo "${GCLOUD_SERVICE_ACCOUNT}" >service-account.json
    - gcloud auth activate-service-account --key-file service-account.json
  script: |
    DEVICE="model=$DEVICE_MODEL,version=$DEVICE_API_VERSION,locale=$DEVICE_LOCALE,orientation=$DEVICE_ORIENTATION";
    RESULTS_DIRECTORY="build-$CI_COMMIT_SHA";

    LOG_FILE="instrumentation.log";
    gcloud firebase test android run \
      --type instrumentation \
      --app "$APK_DIRECTORY/instrumented/app-instrumented.apk" \
      --test "$APK_DIRECTORY/androidTest/instrumented/app-instrumented-androidTest.apk" \
      --device "$DEVICE" \
      --environment-variables coverage=true,coverageFile="/sdcard/coverage.ec" \
      --directories-to-pull /sdcard \
      --results-dir "$RESULTS_DIRECTORY" \
      --timeout 90s 1>"$LOG_FILE" 2>&1;
    FIREBASE_EXIT_VALUE=$?;
    cat "$LOG_FILE";

    BUCKET_NAME=$(grep -oP "(?<=browser\/).*(?<=\/$RESULTS_DIRECTORY)" "$LOG_FILE");
    if [ -z "$BUCKET_NAME" ]; then
      echo "Unable to parse bucket name from log file.";
      exit 1;
    fi

    BUCKET_DEVICE_FOLDER="$DEVICE_MODEL-$DEVICE_API_VERSION-$DEVICE_LOCALE-$DEVICE_ORIENTATION";
    BUCKET_COVERAGE_PATH="gs://$BUCKET_NAME/$BUCKET_DEVICE_FOLDER/artifacts/coverage.ec";
    BUCKET_REPORT_PATH="gs://$BUCKET_NAME/$BUCKET_DEVICE_FOLDER/*.xml";

    mkdir -p "$COVERAGE_OUTPUT_DIRECTORY";
    if ! gsutil -m cp -R "$BUCKET_COVERAGE_PATH" "$COVERAGE_OUTPUT_DIRECTORY"; then
      echo "Unable to pull down coverage output from bucket.";
      exit $?;
    fi

    mkdir -p "$REPORT_OUTPUT_DIRECTORY";
    if ! gsutil -m cp -R "$BUCKET_REPORT_PATH" "$REPORT_OUTPUT_DIRECTORY"; then
      echo "Unable to pull down report output from bucket.";
      exit $?;
    fi
    exit $FIREBASE_EXIT_VALUE;
  needs:
    - app:build
  artifacts:
    paths:
      - app/build/outputs/code_coverage/
      - app/build/outputs/androidTest-results/connected/
    when: always
    expire_in: 4 hours
  allow_failure: true
  only:
    - main
  variables:
    BUILD_DIRECTORY: app/build
    APK_DIRECTORY: "$BUILD_DIRECTORY/outputs/apk"
    COVERAGE_OUTPUT_DIRECTORY: "$BUILD_DIRECTORY/outputs/code_coverage/"
    REPORT_OUTPUT_DIRECTORY: "$BUILD_DIRECTORY/outputs/androidTest-results/connected/"
    DEVICE_MODEL: Pixel2
    DEVICE_API_VERSION: 28
    DEVICE_LOCALE: en
    DEVICE_ORIENTATION: portrait

# stage: sonar

sonar:analyze:
  stage: sonar
  extends:
    - .in-android-environment
  script:
    - ./gradlew jacocoTestReport sonarqube
  interruptible: false
  needs:
    - core:build
    - app:build
    - core:test
    - app:test
    - app:instrumented test
  cache:
    key: "$CI_COMMIT_REF_NAME"
    policy: pull
    paths:
      - .gradle
      - app/build
      - core/build
      - core-test/build
  only:
    - main

# stage: deploy

app:deploy:
  stage: deploy
  extends:
    - .in-docker
  image: ruby:2.7.1-buster
  script:
    - if [ -z "${GOOGLE_PLAY_ANDROID_DEVELOPER_KEY}" ]; then echo "No Google Play Android developer key is available, ensure that \$GOOGLE_PLAY_ANDROID_DEVELOPER_KEY is set for project."; exit 1; fi;
    - echo "${GOOGLE_PLAY_ANDROID_DEVELOPER_KEY}" >"${SUPPLY_JSON_KEY}";
    - bundle install
    - bundle exec fastlane run upload_to_play_store
  interruptible: false
  needs:
    - app:build
    - core:test
    - app:test
  cache:
    key: "$CI_COMMIT_REF_NAME"
    policy: pull
    paths:
      - .gradle
      - app/build
      - core/build
      - core-test/build
  only:
    - tags
  variables:
    SUPPLY_PACKAGE_NAME: 'me.raatiniemi.worker'
    SUPPLY_APK: 'app/build/outputs/apk/release/app-release.apk'
    SUPPLY_TRACK: 'internal'
    SUPPLY_JSON_KEY: 'app/google-play-android-developer-key.json'
