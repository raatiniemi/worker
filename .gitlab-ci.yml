stages:
  - build-core
  - build-app
  - test
  - post-test
  - sonar
  - deploy

variables:
  TZ: "Europe/Stockholm"

include:
  - '/.gitlab-ci/gradle.yml'
  - project: 'rahome/docker-android-environment'
    ref: master
    file: Android.gitlab-ci.yml

.android-variables:
  variables:
    JDK_VERSION: "11"

# stage: build-core

core:build:
  stage: build-core
  extends:
    - .in-gradle-environment
  script:
    - gradle core:assemble core-test:assemble
    - echo "PROJECT_VERSION=$(gradle showVersion | grep -Poi '(?<=version[:]\s)(.+)')" >> core-build.env
  cache:
    key: "$CI_COMMIT_REF_NAME"
    policy: push
    paths:
      - .gradle
      - core/build
      - core-test/build
  artifacts:
    reports:
      dotenv: core-build.env
    paths:
      - core/build/libs/
      - core/build/classes/kotlin/main/
      - core-test/build/libs/
      - core-test/build/classes/kotlin/main/
    expire_in: 4 hours

# stage: build-app

app:build:
  stage: build-app
  extends:
    - .in-android-environment
  script:
    - ./gradlew app:assembleRelease app:assembleDebug app:assembleAndroidTest
  needs:
    - core:build
  cache:
    key: "$CI_COMMIT_REF_NAME"
    paths:
      - .gradle
      - app/build
      - core/build
      - core-test/build
  variables:
    JDK_VERSION: !reference [.android-variables, variables, JDK_VERSION]
  artifacts:
    paths:
      - app/build/outputs/apk/androidTest
      - app/build/outputs/apk/debug
      - app/build/outputs/apk/release
      - app/build/tmp/kotlin-classes/debug
      - app/build/tmp/kotlin-classes/debugAndroidTest
      - app/build/tmp/kotlin-classes/release
    expire_in: 4 hours

# stage: test

core:test:
  stage: test
  extends:
    - .in-gradle-environment
  script:
    - gradle core:test core-test:test
  needs:
    - core:build
  cache:
    key: "$CI_COMMIT_REF_NAME"
    policy: pull
    paths:
      - .gradle
      - core/build
      - core-test/build
  artifacts:
    paths:
      - core/build/jacoco/
      - core/build/test-results/test/
      - core/build/classes/kotlin/test/
      - core-test/build/jacoco/
      - core-test/build/test-results/test/
      - core-test/build/classes/kotlin/test/
    expire_in: 4 hours

app:lint:
  stage: test
  extends:
    - .in-android-environment
  script:
    - ./gradlew app:lintRelease
  needs:
    - core:build
    - app:build
  cache:
    key: "$CI_COMMIT_REF_NAME"
    policy: pull
    paths:
      - .gradle
      - app/build
      - core/build
      - core-test/build
  variables:
    JDK_VERSION: !reference [.android-variables, variables, JDK_VERSION]

app:test:
  stage: test
  extends:
    - .in-android-environment
  script:
    - ./gradlew app:testDebugUnitTest
  needs:
    - core:build
    - app:build
  cache:
    key: "$CI_COMMIT_REF_NAME"
    policy: pull
    paths:
      - .gradle
      - app/build
      - core/build
      - core-test/build
  variables:
    JDK_VERSION: !reference [.android-variables, variables, JDK_VERSION]
  artifacts:
    paths:
      - app/build/jacoco/
      - app/build/test-results/testDebugUnitTest/
      - app/build/tmp/kotlin-classes/debugUnitTest/
    expire_in: 4 hours

app:instrumented test:
  stage: test
  image: google/cloud-sdk:latest
  before_script:
    - if [ -z "${GCLOUD_PROJECT_ID}" ]; then echo "No project id is available for gcloud configuration, ensure that \$GCLOUD_PROJECT_ID is set for project."; exit 1; fi;
    - if [ -z "${GCLOUD_SERVICE_ACCOUNT}" ]; then echo "No service account configuration is available for gcloud, ensure that \$GCLOUD_SERVICE_ACCOUNT is set for project."; exit 1; fi;
    - gcloud config set project "${GCLOUD_PROJECT_ID}"
    - echo "${GCLOUD_SERVICE_ACCOUNT}" >service-account.json
    - gcloud auth activate-service-account --key-file service-account.json
    - gcloud firebase test android models list
    - gcloud firebase test android versions list
  script:
    - bin/run-instrumented-test
  tags:
    - docker
  needs:
    - app:build
  artifacts:
    paths:
      - app/build/outputs/androidTest-results/connected/
      - app/build/outputs/code_coverage/
    when: always
    expire_in: 4 hours
  allow_failure: true
  only:
    - main

# stage: post-test

generate coverage reports:
  stage: post-test
  extends:
    - .in-android-environment
  script:
    - ./gradlew jacocoTestReport
  needs:
    - core:build
    - app:build
    - core:test
    - app:test
    - app:instrumented test
  cache:
    key: "$CI_COMMIT_REF_NAME"
    policy: pull
    paths:
      - .gradle
      - app/build
      - core/build
      - core-test/build
  variables:
    JDK_VERSION: !reference [.android-variables, variables, JDK_VERSION]
  artifacts:
    paths:
      - app/build/reports/jacoco/jacocoTestReport
      - core/build/reports/jacoco/test
      - core-test/build/reports/jacoco/test
    when: always
    expire_in: 4 hours
  only:
    - main

# stage: sonar

sonar:analyze:
  stage: sonar
  image: sonarsource/sonar-scanner-cli
  script:
    - sonar-scanner -Dsonar.host.url="${SONAR_HOST_URL}"
        -Dsonar.organization="${SONAR_ORGANIZATION}"
        -Dsonar.login="${SONAR_LOGIN}"
        -Dsonar.projectVersion="${PROJECT_VERSION}"
  interruptible: false
  tags:
    - docker
  needs:
    - core:build
    - app:build
    - core:test
    - app:test
    - app:instrumented test
    - generate coverage reports
  only:
    - main

# stage: deploy

app:deploy:
  stage: deploy
  image: ruby:2.7.1-buster
  script:
    - if [ -z "${GOOGLE_PLAY_ANDROID_DEVELOPER_KEY}" ]; then echo "No Google Play Android developer key is available, ensure that \$GOOGLE_PLAY_ANDROID_DEVELOPER_KEY is set for project."; exit 1; fi;
    - echo "${GOOGLE_PLAY_ANDROID_DEVELOPER_KEY}" >"${SUPPLY_JSON_KEY}";
    - bundle install
    - bundle exec fastlane run upload_to_play_store
  interruptible: false
  tags:
    - docker
  needs:
    - app:build
    - core:test
    - app:test
  cache:
    key: "$CI_COMMIT_REF_NAME"
    policy: pull
    paths:
      - .gradle
      - app/build
      - core/build
      - core-test/build
  only:
    - tags
  variables:
    SUPPLY_PACKAGE_NAME: 'me.raatiniemi.worker'
    SUPPLY_APK: 'app/build/outputs/apk/release/app-release.apk'
    SUPPLY_TRACK: 'internal'
    SUPPLY_JSON_KEY: 'app/google-play-android-developer-key.json'
