/*
 * Copyright (C) 2021 Tobias Raatiniemi
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, version 2 of the License.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

//noinspection GradleDependency
buildscript {
    repositories {
        google()
        maven { url "https://plugins.gradle.org/m2/" }
        jcenter()
    }

    dependencies {
        classpath 'androidx.navigation:navigation-safe-args-gradle-plugin:2.3.3'
    }
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'androidx.navigation.safeargs.kotlin'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'com.google.firebase.firebase-perf'
apply from: 'jacoco.gradle'

android {
    compileSdkVersion 30
    buildToolsVersion '30.0.2'

    defaultConfig {
        applicationId "me.raatiniemi.worker"
        minSdkVersion 27
        targetSdkVersion 30
        versionName projectVersion
        versionCode projectVersionCode

        if (System.getenv("CI")) {
            testBuildType 'instrumented'
        }
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'

        resConfigs "en"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
    }
    buildFeatures {
        viewBinding true
    }
    if (System.getenv("CI")) {
        signingConfigs {
            release {
                storeFile file("upload.jks")
                storePassword System.getenv("KEYSTORE_PASSWORD")
                keyAlias "upload"
                keyPassword System.getenv("KEY_PASSWORD")
            }
        }
    }
    buildTypes {
        debug {
            applicationIdSuffix = '.debug'
            manifestPlaceholders = [enableCrashReporting: "false"]
        }
        release {
            manifestPlaceholders = [enableCrashReporting: "true"]

            if (System.getenv("CI")) {
                signingConfig signingConfigs.release
            }

            shrinkResources true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            testProguardFile 'proguard-test-rules.pro'
        }
        instrumented {
            initWith release

            manifestPlaceholders = [enableCrashReporting: "false"]
            testCoverageEnabled true
        }
    }
    compileOptions {
        sourceCompatibility sourceCompatibilityVersion
        targetCompatibility targetCompatibilityVersion
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }

    sourceSets {
        test {
            java.srcDirs += 'src/sharedTest/java'
        }
        androidTest {
            java.srcDirs += 'src/sharedTest/java'
            assets.srcDirs += files("$projectDir/schemas".toString())
        }
    }

    // From kotlinx-coroutine 1.3.6, still present in 1.3.8, there is an issue
    // with duplicate files with OS independent paths.
    // ref: https://github.com/Kotlin/kotlinx.coroutines/issues/2023
    packagingOptions {
        exclude "META-INF/AL2.0"
        exclude "META-INF/LGPL2.1"
    }

    lintOptions {
        baseline file("lint.xml")

        quiet true
        explainIssues true

        abortOnError true
        warningsAsErrors true

        htmlReport false
        xmlReport false
    }

    testOptions {
        unitTests.includeAndroidResources = true
        unitTests.returnDefaultValues = true
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
            }
        }
        animationsDisabled = true
    }
}

dependencies {
    def flipperVersion = '0.63.0'
    def soloaderVersion = '0.9.0'

    def androidxCoreVersion = '1.3.2'
    def annotationVersion = '1.1.0'
    def appcompatVersion = '1.2.0'
    def constraintLayoutVersion = '2.0.4'
    def recyclerViewVersion = '1.1.0'
    def cardViewVersion = '1.0.0'
    def preferenceVersion = '1.1.1'
    def lifecycleVersion = '2.2.0'
    def roomVersion = '2.2.6'
    def pagingVersion = '2.1.2'
    def fragmentVersion = '1.3.0'
    def navigationVersion = '2.3.3'
    def materialVersion = '1.3.0'
    def firebaseAnalyticsVersion = '18.0.2'
    def firebaseCrashlyticsVersion = '17.3.1'
    def firebasePerformanceVersion = '19.1.0'
    def koinVersion = '2.1.6'
    def timberVersion = '4.7.1'
    def eventBusVersion = '3.2.0'

    def junitVersion = '4.13.1'
    def testCoreVersion = '1.3.0'
    def testRunnerVersion = '1.3.0'
    def testExtJunitVersion = '1.1.2'
    def espressoVersion = '3.3.0'
    def archCoreTestingVersion = '2.1.0'

    kapt "androidx.room:room-compiler:$roomVersion"

    debugImplementation "com.facebook.flipper:flipper:$flipperVersion"
    debugImplementation "com.facebook.soloader:soloader:$soloaderVersion"

    implementation project(':core')
    implementation "androidx.core:core-ktx:$androidxCoreVersion"
    implementation "androidx.annotation:annotation:$annotationVersion"
    implementation "androidx.appcompat:appcompat:$appcompatVersion"
    implementation "androidx.constraintlayout:constraintlayout:$constraintLayoutVersion"
    implementation "androidx.recyclerview:recyclerview:$recyclerViewVersion"
    implementation "androidx.cardview:cardview:$cardViewVersion"
    implementation "androidx.preference:preference-ktx:$preferenceVersion"
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycleVersion"
    implementation "androidx.room:room-ktx:$roomVersion"
    implementation "androidx.room:room-runtime:$roomVersion"
    implementation "androidx.paging:paging-runtime-ktx:$pagingVersion"
    implementation "androidx.fragment:fragment-ktx:$fragmentVersion"
    implementation "androidx.fragment:fragment-ktx:$fragmentVersion"
    debugImplementation("androidx.fragment:fragment-testing:$fragmentVersion") {
        exclude group: 'androidx.test', module: 'core'
    }
    //noinspection FragmentGradleConfiguration
    instrumentedImplementation("androidx.fragment:fragment-testing:$fragmentVersion") {
        exclude group: 'androidx.test', module: 'core'
    }
    implementation "androidx.navigation:navigation-fragment-ktx:$navigationVersion"
    implementation "androidx.navigation:navigation-ui-ktx:$navigationVersion"
    implementation "com.google.android.material:material:$materialVersion"

    implementation "com.google.firebase:firebase-analytics:$firebaseAnalyticsVersion"
    implementation "com.google.firebase:firebase-crashlytics:$firebaseCrashlyticsVersion"
    implementation "com.google.firebase:firebase-perf:$firebasePerformanceVersion"

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutineVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutineVersion"

    implementation "org.koin:koin-android:$koinVersion"
    implementation "org.koin:koin-android-viewmodel:$koinVersion"

    implementation "com.jakewharton.timber:timber:$timberVersion"
    implementation "org.greenrobot:eventbus:$eventBusVersion"

    testImplementation project(':core-test')
    testImplementation "junit:junit:$junitVersion"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutineVersion"
    testImplementation "org.koin:koin-test:$koinVersion"
    testImplementation "androidx.arch.core:core-testing:$archCoreTestingVersion"

    androidTestImplementation project(':core-test')
    androidTestImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutineVersion"
    androidTestImplementation "org.koin:koin-test:$koinVersion"
    androidTestImplementation "androidx.test:core:$testCoreVersion"
    androidTestImplementation "androidx.test:runner:$testRunnerVersion"
    androidTestImplementation "androidx.test.ext:junit:$testExtJunitVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espressoVersion"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:$espressoVersion"
    androidTestImplementation "androidx.arch.core:core-testing:$archCoreTestingVersion"
    androidTestImplementation "androidx.room:room-testing:$roomVersion"
}
