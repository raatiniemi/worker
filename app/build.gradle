/*
 * Copyright (C) 2022 Tobias Raatiniemi
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, version 2 of the License.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

plugins {
    alias libs.plugins.android
    alias libs.plugins.kotlin.android
    alias libs.plugins.ksp
}

apply from: 'jacoco.gradle'

android {
    compileSdkVersion 33
    buildToolsVersion '32.0.0'

    defaultConfig {
        applicationId "me.raatiniemi.worker"
        minSdkVersion 27
        targetSdkVersion 33
        versionName projectVersion
        versionCode projectVersionCode

        testBuildType 'debug'
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        resConfigs 'en'

        ksp {
            arg("room.schemaLocation", "$projectDir/schemas".toString())
        }
    }
    buildFeatures {
        compose true
        viewBinding true
    }
    if (System.getenv("CI")) {
        signingConfigs {
            release {
                storeFile file("upload.jks")
                storePassword System.getenv("KEYSTORE_PASSWORD")
                keyAlias "upload"
                keyPassword System.getenv("KEY_PASSWORD")
            }
        }
    }
    buildTypes {
        debug {
            applicationIdSuffix = '.debug'
            manifestPlaceholders = [enableCrashReporting: "false"]
            testCoverageEnabled true

            if (System.getenv("CI")) {
                shrinkResources true
                minifyEnabled true
                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
                testProguardFile 'proguard-test-rules.pro'
            }
        }
        release {
            manifestPlaceholders = [enableCrashReporting: "true"]

            if (System.getenv("CI")) {
                signingConfig signingConfigs.release
            }

            shrinkResources true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            testProguardFile 'proguard-test-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    kotlinOptions {
        jvmTarget = "11"
        freeCompilerArgs += "-opt-in=kotlin.RequiresOptIn"
    }

    composeOptions {
        kotlinCompilerExtensionVersion '1.3.2'
    }

    sourceSets {
        test {
            java.srcDirs += 'src/sharedTest/java'
        }
        androidTest {
            java.srcDirs += 'src/sharedTest/java'
            assets.srcDirs += files("$projectDir/schemas".toString())
        }
    }

    lint {
        abortOnError true
        baseline file('lint.xml')
        explainIssues true
        htmlReport false
        quiet true
        warningsAsErrors true
        xmlReport false
    }

    testOptions {
        unitTests.includeAndroidResources = true
        unitTests.returnDefaultValues = true
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
                // Ref: https://github.com/gradle/gradle/issues/5184#issuecomment-457865951
                excludes = ['jdk.internal.*']
            }
        }
        animationsDisabled = true
    }
    testCoverage {
        jacocoVersion '0.8.7'
    }
    namespace 'me.raatiniemi.worker'
}

dependencies {
    ksp(libs.androidx.room.compiler)

    implementation(project(':core'))
    implementation(libs.androidx.core)
    implementation(libs.androidx.annotation)
    implementation(libs.androidx.appcompat)
    implementation(libs.androidx.constraintlayout)
    implementation(libs.androidx.recyclerview)
    implementation(libs.androidx.cardview)
    implementation(libs.androidx.preference)
    implementation(libs.bundles.androidx.lifecycle)
    implementation(libs.bundles.androidx.room)
    implementation(libs.androidx.paging.runtime)
    implementation(libs.androidx.fragment)
    debugImplementation(libs.androidx.fragment.testing) {
        exclude group: 'androidx.test', module: 'core'
    }
    implementation(libs.bundles.androidx.navigation)
    implementation(libs.google.material)

    implementation(libs.bundles.androidx.compose)
    debugImplementation(libs.androidx.compose.ui.test)

    implementation(libs.kotlin)
    implementation(libs.kotlinx.coroutines.core)
    implementation(libs.kotlinx.coroutines.android)

    implementation(libs.bundles.koin)

    implementation(libs.timber)
    implementation(libs.eventbus)

    testImplementation(project(':core-test'))
    testImplementation(libs.junit)
    testImplementation(libs.kotlinx.coroutines.test)
    testImplementation(libs.koin.test)
    testImplementation(libs.androidx.arch.core.testing)
    testImplementation(libs.androidx.paging.common)

    androidTestImplementation(project(':core-test'))
    androidTestImplementation(libs.kotlinx.coroutines.test)
    androidTestImplementation(libs.koin.test)
    androidTestImplementation(libs.androidx.test.core)
    androidTestImplementation(libs.androidx.test.runner)
    androidTestImplementation(libs.androidx.test.ext.junit)
    androidTestImplementation(libs.androidx.compose.ui.test.junit)
    androidTestImplementation(libs.androidx.espresso.core)
    androidTestImplementation(libs.androidx.espresso.contrib) {
        exclude module: "protobuf-lite"
    }
    androidTestImplementation(libs.androidx.arch.core.testing)
    androidTestImplementation(libs.androidx.room.testing)
}
