#!/bin/bash
#
# Copyright (C) 2022 Tobias Raatiniemi
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 2 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

PROJECT_DIRECTORY="$(dirname "${0}")/.."
APK_DIRECTORY="${PROJECT_DIRECTORY}/app/build/outputs/apk"

DEVICE_MODEL="Pixel2"
API_VERSION="28"
LOCALE="en"
ORIENTATION="portrait"

GCLOUD_RESULT_DIRECTORY="build-${CI_COMMIT_SHA}"
GCLOUD_LOG_FILE="${PROJECT_DIRECTORY}/instrumentation.log"

BUCKET_DEVICE_FOLDER="${DEVICE_MODEL}-${API_VERSION}-${LOCALE}-${ORIENTATION}"
BUCKET_COVERAGE_PATH="${BUCKET_DEVICE_FOLDER}/artifacts/coverage.ec"
BUCKET_REPORT_PATH="${BUCKET_DEVICE_FOLDER}/*.xml"

COVERAGE_OUTPUT_DIRECTORY="app/build/outputs/code_coverage/"
REPORT_OUTPUT_DIRECTORY="app/build/outputs/androidTest-results/connected/"

GCLOUD=$(command -v gcloud)
if [ -z "${GCLOUD}" ]; then
  echo "Unable to find binary for gcloud."
  exit 1
fi

GSUTIL=$(command -v gsutil)
if [ -z "${GSUTIL}" ]; then
  echo "Unable to find binary for gsutil."
  exit 1
fi

$GCLOUD firebase test android run \
  --type instrumentation \
  --app "${APK_DIRECTORY}/debug/app-debug.apk" \
  --test "${APK_DIRECTORY}/androidTest/debug/app-debug-androidTest.apk" \
  --device "model=${DEVICE_MODEL},version=${API_VERSION},locale=${LOCALE},orientation=${ORIENTATION}" \
  --environment-variables coverage=true,coverageFile="/sdcard/coverage.ec" \
  --directories-to-pull /sdcard \
  --results-dir "${GCLOUD_RESULT_DIRECTORY}" \
  --timeout 90s 1>"${GCLOUD_LOG_FILE}" 2>&1
FIREBASE_EXIT_VALUE=$?
cat "${GCLOUD_LOG_FILE}"

BUCKET_NAME=$(grep -oP "(?<=browser\/).*(?<=\/${GCLOUD_RESULT_DIRECTORY})" "${GCLOUD_LOG_FILE}")
if [ -z "${BUCKET_NAME}" ]; then
  echo "Unable to parse bucket name from log file."
  exit 1
fi

mkdir -p "${COVERAGE_OUTPUT_DIRECTORY}"
if ! $GSUTIL -m cp -R gs://"${BUCKET_NAME}/${BUCKET_COVERAGE_PATH}" "${COVERAGE_OUTPUT_DIRECTORY}"; then
  echo "Unable to pull down coverage output from bucket."
  exit $?
fi

mkdir -p "${REPORT_OUTPUT_DIRECTORY}"
if ! $GSUTIL -m cp -R gs://"${BUCKET_NAME}/${BUCKET_REPORT_PATH}" "${REPORT_OUTPUT_DIRECTORY}"; then
  echo "Unable to pull down coverage output from bucket."
  exit $?
fi
exit $FIREBASE_EXIT_VALUE
